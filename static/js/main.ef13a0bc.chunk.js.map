{"version":3,"sources":["app/common/video-player/VideoPlayer.tsx","app/common/dropdown/Dropdown.tsx","app/common/image-select/ImageSelect.tsx","app/common/video-player/video-title/VideoTitle.tsx","app/common/video-player/video-poster/VideoPoster.tsx","app/common/video-player/video-control/VideoControl.tsx","app/common/video-player/video-overlay-control/VideoOverlayControl.tsx","app/App.tsx","index.tsx"],"names":["VideoPlayerTheme","Dropdown","props","className","label","onChange","event","onSelect","options","target","value","defaultValue","selectedIndex","map","option","index","textProperty","ImageSelect","useState","setSelectedIndex","onClick","selectOption","title","titleProperty","src","imageProperty","alt","VideoTitle","VideoPoster","source","VideoControl","currentTime","totalTime","isPlaying","isMuted","isFullscreen","skipBackward","togglePlay","skipForward","toggleMute","toggleFullscreen","skip","useEffect","onKeydown","key","document","addEventListener","removeEventListener","getFormattedTime","timeInSeconds","hours","Math","floor","minutes","seconds","getZeroPaddedString","number","toString","padStart","getClickedTimePoint","percentage","nativeEvent","offsetX","currentTarget","offsetWidth","round","style","width","type","icon","faVolumeMute","faVolumeUp","faBackward","size","faPause","faPlay","faForward","faCompress","faExpand","VideoOverlayControl","onDoubleClick","VideoPlayer","setIsPlaying","setIsMuted","isFullScreen","setIsFullScreen","setTotalTime","setCurrentTime","isMouseInIdleState","setIsMouseInIdleState","videoPlayerElementRef","useRef","videoElementRef","videoInfo","mouseIdleTimeoutId","onFullscreenModeChanged","fullscreenElement","onMouseMove","clearTimeout","setTimeout","videoPlayerElement","current","pause","play","ref","theme","videoSrc","onLoadedData","duration","onPlaying","onTimeUpdate","onEnded","posterSrc","volume","webkitCancelFullScreen","webkitRequestFullScreen","App","themeOptions","text","Red","Green","Blue","currentTheme","setCurrentTheme","videoInfos","currentVideoInfo","setCurrentVideoInfo","href","rel","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ef13a0bc.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nimport './VideoPlayer.scss';\n\nimport { VideoTitle } from \"./video-title/VideoTitle\";\nimport { VideoPoster } from \"./video-poster/VideoPoster\";\nimport { VideoControl } from \"./video-control/VideoControl\";\nimport { VideoOverlayControl } from \"./video-overlay-control/VideoOverlayControl\";\n\nexport const VideoPlayer = (props: VideoPlayerProps) => {\n    const SKIP_AMOUNT_IN_SEC = 30;\n    const MOUSE_IDLE_TIMEOUT_IN_MS = 5000;\n\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [isMuted, setIsMuted] = useState(false);\n    const [isFullScreen, setIsFullScreen] = useState(false);\n    const [totalTime, setTotalTime] = useState(0);\n    const [currentTime, setCurrentTime] = useState(0);\n    const [isMouseInIdleState, setIsMouseInIdleState] = useState(false);\n\n    let videoPlayerElementRef = useRef<HTMLDivElement>(null);\n    let videoElementRef = useRef<HTMLVideoElement>(null);\n\n    // Events\n    useEffect(() => setIsPlaying(false), [props.videoInfo]);\n\n    useEffect(() => {\n        let mouseIdleTimeoutId: NodeJS.Timeout;\n        const onFullscreenModeChanged = () => setIsFullScreen(!!document.fullscreenElement);\n        const onMouseMove = () => {\n            clearTimeout(mouseIdleTimeoutId);\n            setIsMouseInIdleState(false);\n            mouseIdleTimeoutId = setTimeout(() => setIsMouseInIdleState(true), MOUSE_IDLE_TIMEOUT_IN_MS);\n        }\n\n        const videoPlayerElement = videoPlayerElementRef.current;\n        videoPlayerElement?.addEventListener('webkitfullscreenchange', onFullscreenModeChanged);\n        videoPlayerElement?.addEventListener('mousemove', onMouseMove);\n        return () => {\n            videoPlayerElement?.removeEventListener('webkitfullscreenchange', onFullscreenModeChanged);\n            videoPlayerElement?.addEventListener('mousemove', onMouseMove);\n        }\n    }, [videoPlayerElementRef]);\n\n    const onLoaded = () => setTotalTime(videoElementRef.current?.duration || 0);\n\n    const onPlaying = () => setIsPlaying(true);\n\n    const onTimeUpdated = () => setCurrentTime(videoElementRef.current?.currentTime || 0);\n\n    const onEnded = () => setIsPlaying(false);\n\n    // Behaviors\n    /**\n     * Plays the video\n     */\n    const play = () => {\n        videoElementRef.current?.play();\n        setIsPlaying(true);\n    }\n\n    /**\n     * Pauses the video\n     */\n    const pause = () => {\n        videoElementRef.current?.pause();\n        setIsPlaying(false);\n    }\n\n    /**     \n     * Toggles play state\n     */\n    const togglePlay = () => isPlaying ? pause() : play();\n\n    /**\n     * Toggles volume mode\n     */\n    const toggleMute = () => {\n        const VOLUME_MIN = 0;\n        const VOLUME_MAX = 1;\n\n        if (videoElementRef.current)\n            videoElementRef.current.volume = isMuted ? VOLUME_MAX : VOLUME_MIN;\n\n        setIsMuted(!isMuted);\n    }\n\n    /**\n     * Toggles fullscreen mode for webkit based browsers\n     * \n     * for more information: https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreen\n     */\n    const toggleFullscreen = () => !isFullScreen ? (videoPlayerElementRef.current as any).webkitRequestFullScreen() : (document as any).webkitCancelFullScreen();\n\n    /**\n     * Sets current time to the given second value\n     * \n     * @param timeInSeconds time to be set\n     */\n    const skip = (timeInSeconds: number) => {\n        if (videoElementRef.current)\n            videoElementRef.current.currentTime = timeInSeconds;\n\n        setCurrentTime(timeInSeconds);\n    }\n\n    /**\n     * Skips backward\n     */\n    const skipBackward = () => {\n        if (currentTime > SKIP_AMOUNT_IN_SEC)\n            skip(currentTime - SKIP_AMOUNT_IN_SEC);\n    }\n\n    /**\n     * Skips forward\n     */\n    const skipForward = () => {\n        if ((totalTime - currentTime) > SKIP_AMOUNT_IN_SEC)\n            skip(currentTime + SKIP_AMOUNT_IN_SEC);\n    }\n\n    return (\n        <div\n            ref={videoPlayerElementRef}\n            className={`video-player theme theme-${props.theme} ${isFullScreen ? 'is-fullscreen' : ''}`}>\n            <video\n                ref={videoElementRef}\n                src={props.videoInfo.videoSrc}\n                onLoadedData={onLoaded}\n                onPlaying={onPlaying}\n                onTimeUpdate={onTimeUpdated}\n                onEnded={onEnded}>\n                Sorry, Your browser does not support HTML5 video feature\n            </video>\n            {!isPlaying && currentTime === 0 ? <VideoPoster source={props.videoInfo.posterSrc}></VideoPoster> : null}\n            <div className={`video-overlay ${isMouseInIdleState ? 'is-hidden' : ''}`}>\n                <VideoOverlayControl isPlaying={isPlaying} skipBackward={skipBackward} togglePlay={togglePlay} skipForward={skipForward}></VideoOverlayControl>\n                <VideoTitle title={props.videoInfo.title}></VideoTitle>\n                <VideoControl\n                    currentTime={currentTime}\n                    totalTime={totalTime}\n                    isPlaying={isPlaying}\n                    isMuted={isMuted}\n                    isFullscreen={isFullScreen}\n                    skipBackward={skipBackward}\n                    togglePlay={togglePlay}\n                    skipForward={skipForward}\n                    toggleMute={toggleMute}\n                    toggleFullscreen={toggleFullscreen}\n                    skip={skip}></VideoControl>\n            </div>\n        </div >\n    );\n}\n\ninterface VideoPlayerProps {\n    videoInfo: VideoInfo;\n    theme: VideoPlayerTheme;\n}\n\nexport interface VideoInfo {\n    title: string;\n    posterSrc: string;\n    videoSrc: string;\n}\n\nexport enum VideoPlayerTheme {\n    Red = 'red',\n    Green = 'green',\n    Blue = 'blue'\n}","import './Dropdown.scss';\n\nexport const Dropdown = (props: DropdownProps) => {\n    return (\n        <div className=\"dropdown\">\n            <label className=\"label\">\n                {props.label}\n            </label>\n            <select\n                className=\"select\"\n                onChange={event => props.onSelect(props.options[+event.target.value])}\n                defaultValue={props.selectedIndex}>\n                {\n                    props.options.map(\n                        (option, index) =>\n                            <option\n                                key={index}\n                                value={index}>\n                                {option[props.textProperty]}\n                            </option>\n                    )\n                }\n            </select>\n        </div>\n    )\n}\n\ninterface DropdownProps {\n    label: string;\n    options: any[];\n    textProperty: string;\n    selectedIndex?: number;\n    onSelect: (option: any) => void;\n}","import { useState } from 'react';\n\nimport './ImageSelect.scss';\n\nexport const ImageSelect = (props: ImageSelectProps) => {\n    const [selectedIndex, setSelectedIndex] = useState(props.selectedIndex);\n\n    const selectOption = (option: any, index: number) => {\n        setSelectedIndex(index);\n        props.onSelect(option);\n    }\n\n    return (\n        <div className=\"image-select\">\n            {\n                props.options.map((option, index) =>\n                    <div\n                        key={index}\n                        className={`option ${index === selectedIndex ? 'is-selected' : ''}`}\n                        onClick={() => selectOption(option, index)}\n                        title={option[props.titleProperty]}>\n                        <img\n                            src={option[props.imageProperty]}\n                            alt={option[props.titleProperty]} />\n                    </div>\n                )\n            }\n        </div>\n    )\n}\n\ninterface ImageSelectProps {\n    options: any[];\n    imageProperty: string;\n    titleProperty: string;\n    selectedIndex?: number;\n    onSelect: (option: any) => void;\n}","import './VideoTitle.scss';\n\nexport const VideoTitle = (props: VideoTitleProps) => {\n    return (\n        <div className=\"video-title\">\n            {props.title}\n        </div>\n    );\n}\n\ninterface VideoTitleProps {\n    title: string;\n}","import './VideoPoster.scss';\n\nexport const VideoPoster = (props: VideoPosterProps) => {\n    return (\n        <div className=\"video-poster\">\n            <img src={props.source} alt=\"poster\"/>\n        </div>\n    );\n}\n\ninterface VideoPosterProps {\n    source: string;\n}","import { useEffect } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBackward, faCompress, faExpand, faForward, faPause, faPlay, faVolumeMute, faVolumeUp } from '@fortawesome/free-solid-svg-icons';\n\nimport './VideoControl.scss';\n\nexport const VideoControl = (props: VideoControlProps) => {\n    const { currentTime, totalTime, isPlaying, isMuted, isFullscreen, skipBackward, togglePlay, skipForward, toggleMute, toggleFullscreen, skip } = props;\n\n    useEffect(() => {\n        const onKeydown = (event: KeyboardEvent) => {\n            switch (event.key) {\n                case 'ArrowLeft':\n                    skipBackward();\n                    break;\n\n                case ' ':\n                    togglePlay();\n                    break;\n\n                case 'ArrowRight':\n                    skipForward();\n                    break;\n            }\n        }\n\n        document.addEventListener('keydown', onKeydown);\n        return () => document.removeEventListener('keydown', onKeydown);\n    }, [skipBackward, togglePlay, skipForward, currentTime, totalTime, isPlaying]);\n\n    const onBarClicked = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        skip(getClickedTimePoint(event));\n    }\n\n    /**\n     * Returns formatted time as 00:00:00\n     * \n     * @param timeInSeconds time to be formatted\n     */\n    const getFormattedTime = (timeInSeconds: number) => {\n        const hours = Math.floor(timeInSeconds / (60 * 60));\n        const minutes = Math.floor(timeInSeconds / 60);\n        const seconds = Math.floor(timeInSeconds % 60);\n\n        const getZeroPaddedString = (number: number) => {\n            return number.toString().padStart(2, '0');\n        }\n\n        return `${getZeroPaddedString(hours)}:${getZeroPaddedString(minutes)}:${getZeroPaddedString(seconds)}`;\n    }\n\n    /**\n     * Returns seekbar width as percentage based on the current time to represent remaining time on the bar\n     */\n    const getCurrentBarWidth = () => {\n        return `${(currentTime / totalTime) * 100}%`;\n    }\n\n    /**\n     * Returns a point in time based on the clicked point on the seekbar\n     * \n     * @param event mouse event\n     */\n    const getClickedTimePoint = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const percentage = (event.nativeEvent.offsetX / event.currentTarget.offsetWidth) * 100;\n\n        return Math.round((percentage * totalTime) / 100);\n    }\n\n    return (\n        <div className=\"video-control\">\n            <div className=\"seekbar-wrapper\">\n                <div className=\"seekbar\" onClick={onBarClicked}>\n                    <div className=\"seekbar-filled\" style={{ width: getCurrentBarWidth() }} ></div>\n                </div>\n            </div>\n            <div className=\"control-wrapper\">\n                <div className=\"control\">\n                    <button type=\"button\" className=\"btn\" onClick={toggleMute}>\n                        <FontAwesomeIcon icon={isMuted ? faVolumeMute : faVolumeUp} />\n                    </button>\n                    <span className=\"time\">\n                        {getFormattedTime(currentTime)}\n                    </span>\n                </div>\n                <div className=\"control\">\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={skipBackward}>\n                        <FontAwesomeIcon icon={faBackward} size=\"2x\" />\n                    </button>\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={togglePlay}>\n                        <FontAwesomeIcon icon={isPlaying ? faPause : faPlay} size=\"3x\" />\n                    </button>\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={skipForward}>\n                        <FontAwesomeIcon icon={faForward} size=\"2x\" />\n                    </button>\n                </div>\n                <div className=\"control\">\n                    <span className=\"time\">\n                        {getFormattedTime(totalTime)}\n                    </span>\n                    <button type=\"button\" className=\"btn\" onClick={toggleFullscreen}>\n                        <FontAwesomeIcon icon={isFullscreen ? faCompress : faExpand} />\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\ninterface VideoControlProps {\n    currentTime: number;\n    totalTime: number;\n    isPlaying: boolean;\n    isMuted: boolean;\n    isFullscreen: boolean;\n    skipBackward: () => void;\n    togglePlay: () => void;\n    skipForward: () => void;\n    toggleMute: () => void;\n    toggleFullscreen: () => void;\n    skip: (timeInSeconds: number) => void;\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBackward, faForward, faPause, faPlay } from '@fortawesome/free-solid-svg-icons';\n\nimport './VideoOverlayControl.scss';\n\nexport const VideoOverlayControl = (props: VideoOverlayControlProps) => {\n    return (\n        <div className=\"video-overlay-control\">\n            <div className=\"control\" onDoubleClick={props.skipBackward}>\n                <FontAwesomeIcon icon={faBackward} size=\"3x\" />\n            </div>\n            <div className=\"control\" onClick={props.togglePlay}>\n                <FontAwesomeIcon icon={props.isPlaying ? faPause : faPlay} size=\"6x\" />\n            </div>\n            <div className=\"control\" onDoubleClick={props.skipForward}>\n                <FontAwesomeIcon icon={faForward} size=\"3x\" />\n            </div>\n        </div>\n    )\n}\n\ninterface VideoOverlayControlProps {\n    isPlaying: boolean;\n    skipBackward: () => void;\n    togglePlay: () => void;\n    skipForward: () => void;\n}","import React, { useState } from 'react';\n\nimport './App.scss';\n\nimport { Dropdown } from './common/dropdown/Dropdown';\nimport { ImageSelect } from './common/image-select/ImageSelect';\nimport { VideoPlayer, VideoInfo, VideoPlayerTheme } from './common/video-player/VideoPlayer';\n\nexport const App = () => {\n  const themeOptions = [\n    { text: 'Red', value: VideoPlayerTheme.Red },\n    { text: 'Green', value: VideoPlayerTheme.Green },\n    { text: 'Blue', value: VideoPlayerTheme.Blue }\n  ];\n  const [currentTheme, setCurrentTheme] = useState(themeOptions[2]);\n\n  const videoInfos: VideoInfo[] = [\n    {\n      title: 'Big Buck Bunny - 2008',\n      posterSrc: 'https://www.blender.org/wp-content/uploads/2013/07/poster-bigbuckbunny.jpg',\n      videoSrc: 'https://download.blender.org/peach/bigbuckbunny_movies/big_buck_bunny_1080p_stereo.ogg'\n    },\n    {\n      title: 'Sintel - 2010',\n      posterSrc: 'https://www.blender.org/wp-content/uploads/2013/07/poster-sintel.jpg',\n      videoSrc: 'http://ftp.nluug.nl/pub/graphics/blender/demo/movies/Sintel.2010.1080p.mkv'\n    },\n    {\n      title: 'Tears of Steel - 2012',\n      posterSrc: 'https://www.blender.org/wp-content/uploads/2013/07/poster-tearsofsteel.jpg',\n      videoSrc: 'http://media.xiph.org/mango/tears_of_steel_1080p.webm'\n    }\n  ];\n  const [currentVideoInfo, setCurrentVideoInfo] = useState(videoInfos[1]);\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        React Video Player\n      </header>\n      <section className=\"body\">\n        <VideoPlayer videoInfo={currentVideoInfo} theme={currentTheme.value} />\n        <fieldset className=\"preferences\">\n          <legend>Preferences</legend>\n          <Dropdown\n            label=\"Theme\"\n            options={themeOptions}\n            textProperty=\"text\"\n            selectedIndex={2}\n            onSelect={option => setCurrentTheme(option)} />\n          <hr />\n          <ImageSelect\n            options={videoInfos}\n            imageProperty=\"posterSrc\"\n            titleProperty=\"title\"\n            selectedIndex={1}\n            onSelect={option => setCurrentVideoInfo(option)} />\n        </fieldset>\n      </section>\n      <footer className=\"footer\">\n        Video © Copyright Blender Foundation | <a href=\"https://www.blender.org/about/projects/\" target=\"_blank\" rel=\"noreferrer\">https://www.blender.org</a>\n      </footer>\n    </div >\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\n\nimport { App } from './app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}