[{"C:\\Projects\\Common\\react-video-player\\src\\index.tsx":"1","C:\\Projects\\Common\\react-video-player\\src\\app\\App.tsx":"2","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\VideoPlayer.tsx":"3","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-poster\\VideoPoster.tsx":"4","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-control\\VideoControl.tsx":"5","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-title\\VideoTitle.tsx":"6","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\dropdown\\Dropdown.tsx":"7","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-overlay-control\\VideoOverlayControl.tsx":"8"},{"size":229,"mtime":1608650232817,"results":"9","hashOfConfig":"10"},{"size":2137,"mtime":1608649775143,"results":"11","hashOfConfig":"10"},{"size":5731,"mtime":1608665357724,"results":"12","hashOfConfig":"10"},{"size":278,"mtime":1608650218904,"results":"13","hashOfConfig":"10"},{"size":4586,"mtime":1608662118955,"results":"14","hashOfConfig":"10"},{"size":247,"mtime":1608650216652,"results":"15","hashOfConfig":"10"},{"size":618,"mtime":1608650218904,"results":"16","hashOfConfig":"10"},{"size":997,"mtime":1608659220684,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1fvteiz",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Projects\\Common\\react-video-player\\src\\index.tsx",[],["36","37"],"C:\\Projects\\Common\\react-video-player\\src\\app\\App.tsx",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\VideoPlayer.tsx",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-poster\\VideoPoster.tsx",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-control\\VideoControl.tsx",["38"],"import { useEffect } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBackward, faCompress, faExpand, faForward, faPause, faPlay, faVolumeMute, faVolumeUp } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './VideoControl.scss';\r\n\r\nexport const VideoControl = (props: VideoControlProps) => {\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', onKeydown);\r\n        return () => document.removeEventListener('keydown', onKeydown);\r\n    }, [props.isPlaying, props.currentTime, props.totalTime]);\r\n\r\n    const onKeydown = (event: KeyboardEvent) => {\r\n        switch (event.key) {\r\n            case 'ArrowLeft':\r\n                props.backward();\r\n                break;\r\n\r\n            case ' ':\r\n                props.togglePlay();\r\n                break;\r\n\r\n            case 'ArrowRight':\r\n                props.forward();\r\n                break;\r\n        }      \r\n    }\r\n\r\n    /**\r\n     * Returns formatted time as 00:00:00\r\n     * \r\n     * @param timeInSeconds time to be formatted\r\n     */\r\n    const getFormattedTime = (timeInSeconds: number) => {\r\n        const hours = Math.floor(timeInSeconds / (60 * 60));\r\n        const minutes = Math.floor(timeInSeconds / 60);\r\n        const seconds = Math.floor(timeInSeconds % 60);\r\n\r\n        const getZeroPaddedString = (number: number) => {\r\n            return number.toString().padStart(2, '0');\r\n        }\r\n\r\n        return `${getZeroPaddedString(hours)}:${getZeroPaddedString(minutes)}:${getZeroPaddedString(seconds)}`;\r\n    }\r\n\r\n    /**\r\n     * Returns progress bar width as percentage based on the current time to represent remaining time on the bar\r\n     */\r\n    const getCurrentBarWidth = () => {\r\n        return `${(props.currentTime / props.totalTime) * 100}%`;\r\n    }\r\n\r\n    /**\r\n     * Returns a point in time based on the percentage provided\r\n     * \r\n     * @param percentage time percentage\r\n     */\r\n    const getTimePoint = (percentage: number) => {\r\n        return Math.round((percentage * props.totalTime) / 100);\r\n    }\r\n\r\n    const onBarClicked = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        const percentage = (event.nativeEvent.offsetX / event.currentTarget.offsetWidth) * 100;\r\n\r\n        props.skip(getTimePoint(percentage));\r\n    }\r\n\r\n    return (\r\n        <div className=\"video-control\">\r\n            <div className=\"seekbar-wrapper\">\r\n                <div className=\"seekbar\" onClick={onBarClicked}>\r\n                    <div className=\"seekbar-filled\" style={{ width: getCurrentBarWidth() }} ></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"control-wrapper\">\r\n                <div className=\"control\">\r\n                    <button type=\"button\" className=\"btn\" onClick={props.toggleMute}>\r\n                        <FontAwesomeIcon icon={props.isMuted ? faVolumeMute : faVolumeUp} />\r\n                    </button>\r\n                    <span className=\"time\">\r\n                        {getFormattedTime(props.currentTime)}\r\n                    </span>\r\n                </div>\r\n                <div className=\"control\">\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={props.backward}>\r\n                        <FontAwesomeIcon icon={faBackward} size=\"2x\" />\r\n                    </button>\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={props.togglePlay}>\r\n                        <FontAwesomeIcon icon={props.isPlaying ? faPause : faPlay} size=\"3x\" />\r\n                    </button>\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={props.forward}>\r\n                        <FontAwesomeIcon icon={faForward} size=\"2x\" />\r\n                    </button>\r\n                </div>\r\n                <div className=\"control\">\r\n                    <span className=\"time\">\r\n                        {getFormattedTime(props.totalTime)}\r\n                    </span>\r\n                    <button type=\"button\" className=\"btn\" onClick={props.toggleFullscreen}>\r\n                        <FontAwesomeIcon icon={props.isInFullscreen ? faCompress : faExpand} />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface VideoControlProps {\r\n    currentTime: number;\r\n    totalTime: number;\r\n    isPlaying: boolean;\r\n    isMuted: boolean;\r\n    isInFullscreen: boolean;\r\n    backward: () => void;\r\n    togglePlay: () => void;\r\n    forward: () => void;\r\n    toggleMute: () => void;\r\n    toggleFullscreen: () => void;\r\n    skip: (timeInSeconds: number) => void;\r\n}","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-title\\VideoTitle.tsx",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\dropdown\\Dropdown.tsx",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-overlay-control\\VideoOverlayControl.tsx",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":12,"column":8,"nodeType":"45","endLine":12,"endColumn":61,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onKeydown'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [props.isPlaying, props.currentTime, props.totalTime, onKeydown]",{"range":"52","text":"53"},[504,557],"[props.isPlaying, props.currentTime, props.totalTime, onKeydown]"]