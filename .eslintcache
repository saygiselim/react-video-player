[{"C:\\Projects\\Common\\react-video-player\\src\\index.tsx":"1","C:\\Projects\\Common\\react-video-player\\src\\reportWebVitals.ts":"2","C:\\Projects\\Common\\react-video-player\\src\\app\\App.tsx":"3","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\VideoPlayer.tsx":"4","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-poster\\VideoPoster.tsx":"5","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-control\\VideoControl.tsx":"6","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-title\\VideoTitle.tsx":"7","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\dropdown\\Dropdown.tsx":"8"},{"size":511,"mtime":1608476730208,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":1464,"mtime":1608565188399,"results":"12","hashOfConfig":"10"},{"size":4453,"mtime":1608562402591,"results":"13","hashOfConfig":"10"},{"size":277,"mtime":1607899365124,"results":"14","hashOfConfig":"10"},{"size":3514,"mtime":1608557923804,"results":"15","hashOfConfig":"10"},{"size":246,"mtime":1608476431497,"results":"16","hashOfConfig":"10"},{"size":685,"mtime":1608564884647,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1fvteiz",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projects\\Common\\react-video-player\\src\\index.tsx",[],["36","37"],"C:\\Projects\\Common\\react-video-player\\src\\reportWebVitals.ts",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\App.tsx",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\VideoPlayer.tsx",["38","39"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport './VideoPlayer.css';\r\n\r\nimport { VideoTitle } from \"./video-title/VideoTitle\";\r\nimport { VideoPoster } from \"./video-poster/VideoPoster\";\r\nimport { VideoControl } from \"./video-control/VideoControl\";\r\n\r\nexport const VideoPlayer = (props: VideoPlayerProps) => {\r\n    const [videoInfo, setVideoInfo] = useState(props.videoInfo || {});\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [isMuted, setIsMuted] = useState(false);\r\n    const [isInFullScreenMode, setIsInFullScreenMode] = useState(false);\r\n    const [totalTime, setTotalTime] = useState(0);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n\r\n    let videoPlayerElementRef = useRef<HTMLDivElement>(null);\r\n    let videoElementRef = useRef<HTMLVideoElement>(null);\r\n\r\n    // Events\r\n    useEffect(() => {\r\n        videoPlayerElementRef.current?.addEventListener('webkitfullscreenchange', onFullscreenModeChanged);\r\n        return () => videoPlayerElementRef.current?.removeEventListener('webkitfullscreenchange', onFullscreenModeChanged);\r\n    }, []);\r\n\r\n    const onLoaded = () => {\r\n        setTotalTime(videoElementRef.current?.duration || 0);\r\n    }\r\n\r\n    const onPlaying = () => {\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    const onTimeUpdated = () => {\r\n        setCurrentTime(videoElementRef.current?.currentTime || 0);\r\n    }\r\n\r\n    const onEnded = () => {\r\n        setIsPlaying(false);\r\n    }\r\n\r\n    const onFullscreenModeChanged = () => {\r\n        setIsInFullScreenMode(!!document.fullscreenElement);\r\n    }\r\n\r\n    // Behaviors\r\n    /**\r\n     * Plays the video\r\n     */\r\n    const play = () => {\r\n        videoElementRef.current?.play();\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    /**\r\n     * Pauses the video\r\n     */\r\n    const pause = () => {\r\n        videoElementRef.current?.pause();\r\n        setIsPlaying(false);\r\n    }\r\n\r\n    /**\r\n     * Toggles play state\r\n     */\r\n    const togglePlay = () => {\r\n        isPlaying ? pause() : play();\r\n    }\r\n\r\n    /**\r\n     * Toggles volume mode\r\n     */\r\n    const toggleMute = () => {\r\n        const VOLUME_MIN = 0;\r\n        const VOLUME_MAX = 1;\r\n\r\n        if (videoElementRef.current)\r\n            videoElementRef.current.volume = isMuted ? VOLUME_MAX : VOLUME_MIN;\r\n\r\n        setIsMuted(!isMuted);\r\n    }\r\n\r\n    /**\r\n     * Toggles fullscreen mode for webkit based browsers\r\n     * \r\n     * for more information: https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreen\r\n     */\r\n    const toggleFullscreen = () => {\r\n        !isInFullScreenMode ? (videoPlayerElementRef.current as any).webkitRequestFullScreen() : (document as any).webkitCancelFullScreen();\r\n    }\r\n\r\n    /**\r\n     * Sets current time to the given second value\r\n     * \r\n     * @param timeInSeconds time to be set\r\n     */\r\n    const skipToTimePoint = (timeInSeconds: number) => {\r\n        if (videoElementRef.current)\r\n            videoElementRef.current.currentTime = timeInSeconds;\r\n\r\n        setCurrentTime(timeInSeconds);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            ref={videoPlayerElementRef}\r\n            className={`video-player theme-${props.theme}`} >\r\n            <video\r\n                ref={videoElementRef}\r\n                src={videoInfo.videoSrc}\r\n                onLoadedData={onLoaded}\r\n                onPlaying={onPlaying}\r\n                onTimeUpdate={onTimeUpdated}\r\n                onEnded={onEnded}>\r\n                Sorry, Your browser does not support HTML5 video feature\r\n            </video>\r\n\r\n            { !isPlaying && currentTime === 0 ? <VideoPoster source={videoInfo.posterSrc}></VideoPoster> : null}\r\n            <VideoTitle title={videoInfo.title}></VideoTitle>\r\n            <VideoControl\r\n                currentTime={currentTime}\r\n                totalTime={totalTime}\r\n                isPlaying={isPlaying}\r\n                isMuted={isMuted}\r\n                isInFullscreen={isInFullScreenMode}\r\n                togglePlay={togglePlay}\r\n                toggleMute={toggleMute}\r\n                toggleFullscreen={toggleFullscreen}\r\n                skipToTimePoint={skipToTimePoint}></VideoControl>\r\n        </div >\r\n    );\r\n}\r\n\r\ninterface VideoPlayerProps {\r\n    videoInfo: VideoInfo;\r\n    theme: VideoPlayerTheme;\r\n}\r\n\r\nexport interface VideoInfo {\r\n    title: string;\r\n    posterSrc: string;\r\n    videoSrc: string;\r\n}\r\n\r\nexport enum VideoPlayerTheme {\r\n    Red = 'red',\r\n    Green = 'green',\r\n    Blue = 'blue'\r\n}","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-poster\\VideoPoster.tsx",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-control\\VideoControl.tsx",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-title\\VideoTitle.tsx",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\dropdown\\Dropdown.tsx",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":10,"column":23,"nodeType":"46","messageId":"47","endLine":10,"endColumn":35},{"ruleId":"48","severity":1,"message":"49","line":23,"column":44,"nodeType":"46","endLine":23,"endColumn":51},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"@typescript-eslint/no-unused-vars","'setVideoInfo' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","The ref value 'videoPlayerElementRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'videoPlayerElementRef.current' to a variable inside the effect, and use that variable in the cleanup function.","no-global-assign","no-unsafe-negation"]