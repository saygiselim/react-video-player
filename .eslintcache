[{"C:\\Projects\\Common\\react-video-player\\src\\index.tsx":"1","C:\\Projects\\Common\\react-video-player\\src\\app\\App.tsx":"2","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\VideoPlayer.tsx":"3","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-poster\\VideoPoster.tsx":"4","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-control\\VideoControl.tsx":"5","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-title\\VideoTitle.tsx":"6","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\dropdown\\Dropdown.tsx":"7","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-overlay-control\\VideoOverlayControl.tsx":"8","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\image-select\\ImageSelect.tsx":"9"},{"size":229,"mtime":1608650232817,"results":"10","hashOfConfig":"11"},{"size":2413,"mtime":1608814495275,"results":"12","hashOfConfig":"11"},{"size":6022,"mtime":1608821707939,"results":"13","hashOfConfig":"11"},{"size":278,"mtime":1608813561936,"results":"14","hashOfConfig":"11"},{"size":4766,"mtime":1608813554641,"results":"15","hashOfConfig":"11"},{"size":247,"mtime":1608813567139,"results":"16","hashOfConfig":"11"},{"size":1287,"mtime":1608739401245,"results":"17","hashOfConfig":"11"},{"size":1013,"mtime":1608813558367,"results":"18","hashOfConfig":"11"},{"size":1223,"mtime":1608739583653,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1fvteiz",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\Projects\\Common\\react-video-player\\src\\index.tsx",[],["43","44"],"C:\\Projects\\Common\\react-video-player\\src\\app\\App.tsx",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\VideoPlayer.tsx",["45"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport './VideoPlayer.scss';\r\n\r\nimport { VideoTitle } from \"./video-title/VideoTitle\";\r\nimport { VideoPoster } from \"./video-poster/VideoPoster\";\r\nimport { VideoControl } from \"./video-control/VideoControl\";\r\nimport { VideoOverlayControl } from \"./video-overlay-control/VideoOverlayControl\";\r\n\r\nexport const VideoPlayer = (props: VideoPlayerProps) => {\r\n    const SKIP_AMOUNT_IN_SEC = 30;\r\n    const MOUSE_IDLE_TIMEOUT_IN_MS = 5000;\r\n\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [isMuted, setIsMuted] = useState(false);\r\n    const [isFullScreen, setIsFullScreen] = useState(false);\r\n    const [totalTime, setTotalTime] = useState(0);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n    const [isMouseInIdleState, setIsMouseInIdleState] = useState(false);\r\n\r\n    let videoPlayerElementRef = useRef<HTMLDivElement>(null);\r\n    let videoElementRef = useRef<HTMLVideoElement>(null);\r\n\r\n    let mouseIdleTimeoutId: NodeJS.Timeout;\r\n\r\n    // Events\r\n    useEffect(() => setIsPlaying(false), [props.videoInfo]);\r\n\r\n    useEffect(() => {\r\n        const onFullscreenModeChanged = () => setIsFullScreen(!!document.fullscreenElement);\r\n        const onMouseMove = () => resetMouseIdleTimer();\r\n\r\n        const videoPlayerElement = videoPlayerElementRef.current;\r\n        videoPlayerElement?.addEventListener('webkitfullscreenchange', onFullscreenModeChanged);\r\n        videoPlayerElement?.addEventListener('mousemove', onMouseMove);\r\n        console.log('events added');\r\n        return () => {\r\n            videoPlayerElement?.removeEventListener('webkitfullscreenchange', onFullscreenModeChanged);\r\n            videoPlayerElement?.addEventListener('mousemove', onMouseMove);\r\n        }\r\n    }, [videoPlayerElementRef]);\r\n\r\n    const onLoaded = () => setTotalTime(videoElementRef.current?.duration || 0);\r\n\r\n    const onPlaying = () => setIsPlaying(true);\r\n\r\n    const onTimeUpdated = () => setCurrentTime(videoElementRef.current?.currentTime || 0);\r\n\r\n    const onEnded = () => setIsPlaying(false);\r\n\r\n    // Behaviors\r\n    /**\r\n     * Plays the video\r\n     */\r\n    const play = () => {\r\n        videoElementRef.current?.play();\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    /**\r\n     * Pauses the video\r\n     */\r\n    const pause = () => {\r\n        videoElementRef.current?.pause();\r\n        setIsPlaying(false);\r\n    }\r\n\r\n    /**     \r\n     * Toggles play state\r\n     */\r\n    const togglePlay = () => isPlaying ? pause() : play();\r\n\r\n    /**\r\n     * Toggles volume mode\r\n     */\r\n    const toggleMute = () => {\r\n        const VOLUME_MIN = 0;\r\n        const VOLUME_MAX = 1;\r\n\r\n        if (videoElementRef.current)\r\n            videoElementRef.current.volume = isMuted ? VOLUME_MAX : VOLUME_MIN;\r\n\r\n        setIsMuted(!isMuted);\r\n    }\r\n\r\n    /**\r\n     * Toggles fullscreen mode for webkit based browsers\r\n     * \r\n     * for more information: https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreen\r\n     */\r\n    const toggleFullscreen = () => !isFullScreen ? (videoPlayerElementRef.current as any).webkitRequestFullScreen() : (document as any).webkitCancelFullScreen();\r\n\r\n    /**\r\n     * Sets current time to the given second value\r\n     * \r\n     * @param timeInSeconds time to be set\r\n     */\r\n    const skip = (timeInSeconds: number) => {\r\n        if (videoElementRef.current)\r\n            videoElementRef.current.currentTime = timeInSeconds;\r\n\r\n        setCurrentTime(timeInSeconds);\r\n    }\r\n\r\n    /**\r\n     * Skips backward\r\n     */\r\n    const skipBackward = () => {\r\n        if (currentTime > SKIP_AMOUNT_IN_SEC)\r\n            skip(currentTime - SKIP_AMOUNT_IN_SEC);\r\n    }\r\n\r\n    /**\r\n     * Skips forward\r\n     */\r\n    const skipForward = () => {\r\n        if ((totalTime - currentTime) > SKIP_AMOUNT_IN_SEC)\r\n            skip(currentTime + SKIP_AMOUNT_IN_SEC);\r\n    }\r\n\r\n    /**\r\n     * Resets mouse idle timer\r\n     */\r\n    const resetMouseIdleTimer = () => {\r\n        clearTimeout(mouseIdleTimeoutId);\r\n        setIsMouseInIdleState(false);\r\n        mouseIdleTimeoutId = setTimeout(() => setIsMouseInIdleState(true), MOUSE_IDLE_TIMEOUT_IN_MS);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            ref={videoPlayerElementRef}\r\n            className={`video-player theme theme-${props.theme} ${isFullScreen ? 'is-fullscreen' : ''}`}>\r\n            <video\r\n                ref={videoElementRef}\r\n                src={props.videoInfo.videoSrc}\r\n                onLoadedData={onLoaded}\r\n                onPlaying={onPlaying}\r\n                onTimeUpdate={onTimeUpdated}\r\n                onEnded={onEnded}>\r\n                Sorry, Your browser does not support HTML5 video feature\r\n            </video>\r\n            {!isPlaying && currentTime === 0 ? <VideoPoster source={props.videoInfo.posterSrc}></VideoPoster> : null}\r\n            <div className={`video-overlay ${isMouseInIdleState ? 'is-hidden' : ''}`}>\r\n                <VideoOverlayControl isPlaying={isPlaying} skipBackward={skipBackward} togglePlay={togglePlay} skipForward={skipForward}></VideoOverlayControl>\r\n                <VideoTitle title={props.videoInfo.title}></VideoTitle>\r\n                <VideoControl\r\n                    currentTime={currentTime}\r\n                    totalTime={totalTime}\r\n                    isPlaying={isPlaying}\r\n                    isMuted={isMuted}\r\n                    isFullscreen={isFullScreen}\r\n                    skipBackward={skipBackward}\r\n                    togglePlay={togglePlay}\r\n                    skipForward={skipForward}\r\n                    toggleMute={toggleMute}\r\n                    toggleFullscreen={toggleFullscreen}\r\n                    skip={skip}></VideoControl>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\ninterface VideoPlayerProps {\r\n    videoInfo: VideoInfo;\r\n    theme: VideoPlayerTheme;\r\n}\r\n\r\nexport interface VideoInfo {\r\n    title: string;\r\n    posterSrc: string;\r\n    videoSrc: string;\r\n}\r\n\r\nexport enum VideoPlayerTheme {\r\n    Red = 'red',\r\n    Green = 'green',\r\n    Blue = 'blue'\r\n}","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-poster\\VideoPoster.tsx",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-control\\VideoControl.tsx",[],["46","47"],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-title\\VideoTitle.tsx",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\dropdown\\Dropdown.tsx",["48"],"import { useEffect, useState } from 'react';\r\n\r\nimport './Dropdown.scss';\r\n\r\nexport const Dropdown = (props: DropdownProps) => {\r\n    const [selectedOption, setSelectedOption] = useState(props.selectedOption);\r\n\r\n    useEffect(() => {\r\n        if (selectedOption)\r\n            props.onSelect(selectedOption);\r\n    }, [selectedOption])\r\n\r\n    return (\r\n        <div className=\"dropdown\">\r\n            <label className=\"label\">\r\n                {props.label}\r\n            </label>\r\n            <select\r\n                className=\"select\"\r\n                onChange={event => setSelectedOption(props.options[+event.target.value])}\r\n                defaultValue={props.options.indexOf(selectedOption)}>\r\n                {\r\n                    props.options.map(\r\n                        (option, index) =>\r\n                            <option\r\n                                key={index}\r\n                                value={index}>\r\n                                {option[props.textProperty]}\r\n                            </option>\r\n                    )\r\n                }\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface DropdownProps {\r\n    label: string;\r\n    options: any[];\r\n    textProperty: string;\r\n    selectedOption?: any;\r\n    onSelect: (option: any) => void;\r\n}","C:\\Projects\\Common\\react-video-player\\src\\app\\common\\video-player\\video-overlay-control\\VideoOverlayControl.tsx",[],"C:\\Projects\\Common\\react-video-player\\src\\app\\common\\image-select\\ImageSelect.tsx",["49"],"import { useEffect, useState } from 'react';\r\n\r\nimport './ImageSelect.scss';\r\n\r\nexport const ImageSelect = (props: ImageSelectProps) => {\r\n    const [selectedOption, setSelectedOption] = useState(props.selectedOption);\r\n\r\n    useEffect(() => {\r\n        if (selectedOption)\r\n            props.onSelect(selectedOption);\r\n    }, [selectedOption]);\r\n\r\n    return (\r\n        <div className=\"image-select\">\r\n            {\r\n                props.options.map((option, index) =>\r\n                    <div\r\n                        key={index}\r\n                        className={`option ${option[props.imageProperty] === selectedOption[props.imageProperty] ? 'is-selected' : ''}`}\r\n                        onClick={() => setSelectedOption(option)}\r\n                        title={option[props.titleProperty]}>\r\n                        <img\r\n                            src={option[props.imageProperty]}\r\n                            alt={option[props.titleProperty]} />\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface ImageSelectProps {\r\n    options: any[];\r\n    imageProperty: string;\r\n    titleProperty: string;\r\n    selectedOption?: any;\r\n    onSelect: (option: any) => void;\r\n}",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":41,"column":8,"nodeType":"56","endLine":41,"endColumn":31,"suggestions":"57"},{"ruleId":"50","replacedBy":"58"},{"ruleId":"52","replacedBy":"59"},{"ruleId":"54","severity":1,"message":"60","line":11,"column":8,"nodeType":"56","endLine":11,"endColumn":24,"suggestions":"61"},{"ruleId":"54","severity":1,"message":"60","line":11,"column":8,"nodeType":"56","endLine":11,"endColumn":24,"suggestions":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetMouseIdleTimer'. Either include it or remove the dependency array.","ArrayExpression",["65"],["63"],["64"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["66"],["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},{"desc":"70","fix":"72"},"Update the dependencies array to be: [resetMouseIdleTimer, videoPlayerElementRef]",{"range":"73","text":"74"},"Update the dependencies array to be: [props, selectedOption]",{"range":"75","text":"76"},{"range":"77","text":"76"},[1780,1803],"[resetMouseIdleTimer, videoPlayerElementRef]",[317,333],"[props, selectedOption]",[326,342]]